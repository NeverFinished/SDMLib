apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
if(new File("secring.gpg").exists()) {
	apply plugin: 'signing'
}

apply from: 'gradle/ide.gradle'
apply from: 'gradle/version.gradle'
apply from: 'gradle/tasks.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// apply plugins/external files only on jenkins build
// jenkins needs -Pjenkins switch
if (project.hasProperty('jenkins')) {
    //apply plugin: 'checkstyle'
    apply from: 'gradle/artifactory.gradle'
	apply from: 'gradle/mavencentral.gradle'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceSets.main.java.srcDirs += ['src/main/replication']

buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}


test {
    if (project.hasProperty('maxParallelForks'))
        maxParallelForks = project.maxParallelForks as int
    if (project.hasProperty('forkEvery'))
        forkEvery = project.forkEvery as int
}

repositories {
    jcenter()
    //mavenLocal()
    mavenCentral()

    // NetworkParser
	if(gitVersion.isMaster() || isTravisSnapshot()) {
		maven { url "https://se.cs.uni-kassel.de/artifactory/libs-release-local" }
    }else{
        maven { url "https://se.cs.uni-kassel.de/artifactory/libs-snapshot-local" }
    }
}

dependencies {
    compile group: "junit", name: "junit", version: "4.+"
	compile 'de.uniks:NetworkParser:[4.2,):sources'
}

jacoco {
	toolVersion = "0.7.5.201505241946"
}
jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	executionData = files("$buildDir/jacoco/test.exec")
	reports {
		xml {
			enabled true
			//Following value is a file
			destination "${buildDir}/reports/jacoco/jacoco.xml"
		}
		csv.enabled false
		html {
			enabled true
			//Following value is a folder
			destination "${buildDir}/reports/jacoco"
		}
	}
}

test {
    testLogging {
		events "failed"
		exceptionFormat "short"
		showStackTraces	true
		showStandardStreams true
		showCauses true
    }
}

// Java Compiler Args
tasks.withType(JavaCompile) {
    //Suppress underscore warnings
    options.compilerArgs << '-Xlint:none'
}

def isTravisSnapshot() {
	boolean result=false;
	Map<String, String> env = System.getenv();
	for (String envName : env.keySet()) {
		if("travisci".equalsIgnoreCase(envName)) {
			result = "snaphot".equalsIgnoreCase(env.get(envName));
		}
	}
	return result;
}

defaultTasks 'clean', 'test', 'jar'