apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

apply from: 'gradle/ide.gradle'
apply from: 'gradle/version.gradle'
apply from: 'gradle/tasks.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// apply plugins/external files only on jenkins build
// jenkins needs -Pjenkins switch
if (project.hasProperty('jenkins')) {
    //apply plugin: 'checkstyle'
    //apply from: 'gradle/version.gradle'
    apply from: 'gradle/artifactory.gradle'
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

sourceSets.main.java.srcDirs += ['src/main/replication']

buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4')
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}


test {
    if (project.hasProperty('maxParallelForks'))
        maxParallelForks = project.maxParallelForks as int
    if (project.hasProperty('forkEvery'))
        forkEvery = project.forkEvery as int
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()

    // NetworkParser
    if(project.hasProperty('lectureBuild')) {
        maven { url "https://se.cs.uni-kassel.de/artifactory/lecture" }
    }else{
        maven { url "https://se.cs.uni-kassel.de/artifactory/libs-snapshot-local" }
    }
}

dependencies {
    compile group: "junit", name: "junit", version: "4.+"
    compile group: "org.beanshell", name: "bsh", version: "2.+"
    compile 'de.uniks:NetworkParser:4.2+:sources'
}

jacoco {
	toolVersion = '0.7.1.201405082137'
	//reportsDir = file("${buildDir}/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacoco/html"
    }
}

test {
    testLogging {
        showStandardStreams = true
        showStackTraces = true
        exceptionFormat = "full"
    }
}

// Java Compiler Args
tasks.withType(JavaCompile) {
    //Suppress underscore warnings
    options.compilerArgs << '-Xlint:none'
}
