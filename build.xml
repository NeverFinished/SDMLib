<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="SDMLib">
	<property environment="env" />
	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.7" />
	<property name="source" value="1.7" />
	<property name="coverage.meta.dir" value="emma" />
	<property name="coverage.report.dir" value="emmareports" />
	<property name="emma.filter" value="" />
	<property name="emma.enabled" value="true" />

	<path id="SDMLib.libs">
		<pathelement location="lib/jcommon-1.0.17.jar" />
		<pathelement location="lib/jfreechart-1.0.14.jar" />
		<pathelement location="lib/gwtx-1.5.2.jar" />
		<pathelement location="${env.JAVA_HOME}/jre/lib/jfxrt.jar" />
		<pathelement location="lib/junit.jar" />
		<pathelement location="lib/org.hamcrest.core_1.3.0.v201303031735.jar" />
		<pathelement location="lib/emma.jar" />
		<pathelement location="lib/emma_ant.jar" />
		<pathelement location="lib/jgraphx.jar" />
	</path>
	
	
	<path id="SDMLib.classpath">
		<pathelement location="bin" />
		<path refid="SDMLib.libs" />
	</path>

	<taskdef resource="emma_ant.properties" classpathref="SDMLib.classpath" />

	<target name="AllTests" depends="build">
		<delete dir="${junit.output.dir}" />
		<delete dir="${coverage.meta.dir}" />
		<delete dir="${coverage.report.dir}" />
		<mkdir dir="${junit.output.dir}" />
		
		<emma enabled="${emma.enabled}" verbosity="verbose">
			<instr instrpath="bin" destdir="binInst" metadatafile="${coverage.meta.dir}/metadata2.emma" merge="true" mode="fullcopy">
				<filter value="${emma.filter}" />
			</instr>
		</emma>
		<junit printsummary="yes" haltonfailure="no" fork="true" dir="${basedir}">
					<classpath>
						<pathelement location="binInst/classes" />
						<path refid="SDMLib.libs" />
					</classpath>
					<formatter type="xml" />
					<batchtest fork="yes" todir="${junit.output.dir}">
						<fileset dir="examples" includes="**/*.java">
							<contains text="@Test"/>
						</fileset>
						<fileset dir="test" includes="**/*.java">
							<contains text="@Test"/>
							<exclude name="**/ReverseClassModelTest.java"/>
						</fileset>
					</batchtest>
					<jvmarg value="-Demma.coverage.out.file=${coverage.meta.dir}/coverage.ec" />
					<jvmarg value="-Demma.coverage.out.merge=true" />
			        <jvmarg value="-XX:-UseSplitVerifier" />
	    </junit>
		<emma enabled="${emma.enabled}" verbosity="verbose">
			<report>
				<sourcepath>
					<pathelement path="${basedir}/examples"/>
					<pathelement path="${basedir}/src"/>
					<pathelement path="${basedir}/test"/>
					<pathelement path="${basedir}/srchelpers"/>
					<pathelement path="${basedir}/testhelpers"/>
					<pathelement path="${basedir}/examplehelpers"/>
				</sourcepath>
				<fileset dir="${coverage.meta.dir}">
					<include name="*.emma" />
					<include name="*.ec" />
				</fileset>
				<xml outfile="${coverage.report.dir}/report.xml" />
				<html outfile="${coverage.report.dir}/report.html" />
			</report>
		</emma>
	</target>

	<target name="init">
		<mkdir dir="bin" />
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="src">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="test">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="examples">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="srchelpers">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="examplehelpers">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="testhelpers">
				<exclude name="**/*.launch" />
				<exclude name="**/*.xtend" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="clean">
		<delete dir="bin" />
	</target>
	<target depends="clean" name="cleanall" />
	<target depends="build-subprojects,build-project" name="build" />
	<target name="build-subprojects" />
	<target depends="init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
			<src path="src" />
			<src path="test" />
			<src path="examples" />
			<src path="srchelpers" />
			<src path="examplehelpers" />
			<src path="testhelpers" />
			<classpath refid="SDMLib.classpath" />
		</javac>
	</target>
	<target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects">
		<ant antfile="build.xml" dir="${DuaneDemo.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${DuaneDemo.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${JavaFXExamples.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${JavaFXExamples.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${ObjectsFirstBook.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${ObjectsFirstBook.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${SDMLibExampleProject.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${SDMLibExampleProject.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${SDMLibFujabaCoop.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${SDMLibFujabaCoop.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${SDMLibTTC2013PetriNet2Statechart.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${SDMLibTTC2013PetriNet2Statechart.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${SDMLibTTCLiveContest.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${SDMLibTTCLiveContest.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
		<ant antfile="build.xml" dir="${SimpleUniProject.location}" inheritAll="false" target="clean" />
		<ant antfile="build.xml" dir="${SimpleUniProject.location}" inheritAll="false" target="build">
			<propertyset>
				<propertyref name="build.compiler" />
			</propertyset>
		</ant>
	</target>
	<target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
		<copy todir="${ant.library.dir}">
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar" />
		</copy>
		<unzip dest="${ant.library.dir}">
			<patternset includes="jdtCompilerAdapter.jar" />
			<fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar" />
		</unzip>
	</target>
	<target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
		<antcall target="build" />
	</target>
	<target name="Adam (1)">
		<java classname="org.sdmlib.examples.adamandeve.Adam" failonerror="true" fork="yes">
			<classpath refid="SDMLib.classpath" />
		</java>
	</target>
	<target name="AdamAndEveModel (1)">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.adamandeve.AdamAndEveModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ChartTest (1)">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.scenarios.ChartTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ClassModelTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.model.classes.ClassModelTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ClassModelTest.testClassModelCodeGen">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.model.classes.ClassModelTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="EMFStudyRightModel">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.emfstudyright.EMFStudyRightModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="EmptyClassTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.model.classes.EmptyClassTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="Eve (1)">
		<java classname="org.sdmlib.examples.adamandeve.Eve" failonerror="true" fork="yes">
			<classpath refid="SDMLib.classpath" />
		</java>
	</target>
	<target name="GenericObjectsTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.objects.GenericObjectsTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="GenericObjectsTest.testGenericObjectDiagram">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.objects.GenericObjectsTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="GroupAccountFXGui">
		<java classname="org.sdmlib.examples.groupAccount.GroupAccountFXGui" failonerror="true" fork="yes">
			<classpath refid="SDMLib.classpath" />
		</java>
	</target>
	<target name="GroupAccountTests (1)">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.groupAccount.GroupAccountTests" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="HelloWorldTmp">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.helloworld.HelloWorldTmp" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="HelloWorldTTC2011.deleteNodeWithNameN1">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.helloworld.HelloWorldTTC2011" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="HelloWorldTTC2011.insertTransitiveEdges">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.helloworld.HelloWorldTTC2011" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="HelloWorldTTC2011">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.helloworld.HelloWorldTTC2011" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="HelloWorldTTC2011.testTTC2011InsertTransitiveEdges">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.helloworld.HelloWorldTTC2011" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="LudoModel">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.ludo.LudoModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="LudoReverseModel">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.ludoreverse.LudoReverseModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="LudoScenario">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.ludo.LudoScenario" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="LudoScenario.testLudoScenario">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.ludo.LudoScenario" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="org.sdmlib.model.test.superclasses">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="PatternModelCodeGen">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.patterns.PatternModelCodeGen" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="PatternModelCodeGen.testPatternModelCodegen">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.patterns.PatternModelCodeGen" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ProjectBoard">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.kanban.ProjectBoard" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ReachbilityGraphFerrymansProblemExample">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.patterns.ReachbilityGraphFerrymansProblemExample" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ReachbilityGraphModels">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.patterns.ReachbilityGraphModels" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ReachbilityGraphSimpleExamples">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.patterns.ReachbilityGraphSimpleExamples" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="ReplicationModel">
		<java classname="org.sdmlib.replication.ReplicationModel" failonerror="true" fork="yes">
			<classpath refid="SDMLib.classpath" />
		</java>
	</target>
	<target name="ReplicationServer">
		<java classname="org.sdmlib.replication.ReplicationServer" failonerror="true" fork="yes">
			<classpath refid="SDMLib.classpath" />
		</java>
	</target>
	<target name="ReverseClassModelTest">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.model.classes.ReverseClassModelTest" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="StudyRightClassesCodeGen">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.studyright.StudyRightClassesCodeGen" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="StudyRightClassesCodeGen.testStudyRightObjectScenarios">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.studyright.StudyRightClassesCodeGen" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="StudyRightScenarios">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.studyright.StudyRightScenarios" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="TaskFlowModel">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.model.taskflows.TaskFlowModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="TaskFlowModel.taskFlowModel">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.model.taskflows.TaskFlowModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="TrainModel">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.patternrewriteops.TrainModel" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="TrainStoryboards">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.patternrewriteops.TrainStoryboards" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="TransformationsCodeGen">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.models.transformations.TransformationsCodeGen" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="StoryboardTests">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<test name="org.sdmlib.examples.studyrightWithAssignments.StoryboardTests" todir="${junit.output.dir}" />
			<classpath refid="SDMLib.classpath" />
		</junit>
	</target>
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>
</project>
