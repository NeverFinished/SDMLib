 import java.lang.ClassValue.Version;

apply plugin: 'artifactory'
apply plugin: 'maven'

buildscript {
    repositories {
        maven {
            url 'https://se.cs.uni-kassel.de/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            if(project.hasProperty('lectureBuild')) {
	            repoKey = 'lecture'
	        }else{
	            repoKey = 'libs-snapshot-local'
	        }
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
    resolve {
        repository {
            if(project.hasProperty('lectureBuild')) {
	            repoKey = 'lecture'
	        }else{
	            repoKey = 'libs-release'
	        }
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
}

task sourceJar(type: Jar) { from sourceSets.main.allSource; classifier = 'sources' }
task javadocJar(type: Jar) { from javadoc.outputs.files; classifier = 'javadoc' }
task fatJar(type: Jar) {
	manifest {
	   attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'SDMLib',
			'Specification-Title': 'SDMLib',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'SDMLib',
			'Bundle-ClassPath': '.'
	}
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    with sourceJar
    with javadocJar
    exclude('junit/**') 
    exclude('org/hamcrest/**')
    exclude('org/junit/**')
	exclude('META-INF/MANIFEST.MF')
    classifier = 'all'
}
task pmJar(type: Jar) {
	from {(
		sourceSets.main.output + sourceSets.main.allSource + javadoc.outputs.files +
		configurations.compile.filter({it.name.indexOf("NetworkParser")>=0 && it.name.indexOf("NetworkParserFX")<0 && it.name.indexOf("source")>=0}).collect({println "BLA: "+it;it.isDirectory() ? it : zipTree(it)}) +
		configurations.compile.filter({it.name.indexOf("NetworkParserFX")>=0 && it.name.indexOf("source")>=0}).collect({println "BLA: "+it;it.isDirectory() ? it : zipTree(it)})
		)}
	manifest {
		attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'SDMLib',
			'Specification-Title': 'SDMLib',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Author': 'Stefan Lindel',
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'SDMLib',
			'Bundle-ClassPath': '.'
	}
	exclude('META-INF/MANIFEST.MF')
	exclude('org/sdmlib/models/transformations/**')
	exclude('org/sdmlib/replication/**')

	// REMOVE not nessessary Files NetworkParser
	exclude('de/uniks/networkparser/bytes/**')
	exclude('de/uniks/networkparser/date/**')
	
	classifier = 'pm'
}

task latestJar(type: Jar) {
	from {(
		sourceSets.main.output + sourceSets.main.allSource + javadoc.outputs.files +
		configurations.compile.filter({it.name.indexOf("NetworkParser")>=0 && it.name.indexOf("NetworkParserFX")<0 && it.name.indexOf("source")>=0}).collect({println "BLA: "+it;it.isDirectory() ? it : zipTree(it)}) +
		configurations.compile.filter({it.name.indexOf("NetworkParserFX")>=0 && it.name.indexOf("source")>=0}).collect({println "BLA: "+it;it.isDirectory() ? it : zipTree(it)})
		)}
	manifest {
		attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'SDMLib',
			'Specification-Title': 'SDMLib',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Author': 'Stefan Lindel',
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'SDMLib',
			'Bundle-ClassPath': '.'
	}
	exclude('META-INF/MANIFEST.MF')
	exclude('org/sdmlib/models/transformations/**')
	exclude('org/sdmlib/replication/**')

	// REMOVE not nessessary Files NetworkParser
	exclude('de/uniks/networkparser/bytes/**')
	exclude('de/uniks/networkparser/date/**')
	classifier = 'pm'
	baseName = "latest"
}

artifacts { archives sourceJar, javadocJar, fatJar, pmJar, latestJar}
