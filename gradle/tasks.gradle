task sourceJar(type: Jar) {
    from sourceSets.main.allSource;
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc.outputs.files;
    classifier = 'javadoc'
}

task fatJar(type: Jar) {
	manifest {
	   attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'SDMLib',
			'Specification-Title': 'SDMLib',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'SDMLib',
			'Bundle-ClassPath': '.'
	}
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    with sourceJar
    with javadocJar
    exclude('junit/**') 
    exclude('org/hamcrest/**')
    exclude('org/junit/**')
	exclude('META-INF/MANIFEST.MF')
    classifier = 'all'
}

task pmJar(type: Jar) {
	from {(
		sourceSets.main.output + sourceSets.main.allSource + javadoc.outputs.files +
		configurations.compile.filter({it.name.indexOf("NetworkParser")>=0 && it.name.indexOf("source")>=0}).collect({println "BLA: "+it;it.isDirectory() ? it : zipTree(it)}) 
		)}
	manifest {
		attributes 'Specification-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'Implementation-Title': 'SDMLib',
			'Specification-Title': 'SDMLib',
			'Built-Time': gitVersion.buildTime,
			'Created-By': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision+" "+System.properties['user.name'],
			'Built-By': "${System.properties['user.name']}",
			'Location': "${System.properties['user.language']}",
			'Version': gitVersion.revision,
			'Author': 'Stefan Lindel',
			'Implementation-Version': gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision,
			'GIT-Revision': gitVersion.revision,
			'Java-Version': "${System.properties['java.version']}",
			'Bundle-Description': 'SDMLib',
			'Bundle-ClassPath': '.'
	}
	exclude('META-INF/MANIFEST.MF')
	exclude('org/sdmlib/models/transformations/**')
	exclude('org/sdmlib/replication/**')

	// REMOVE not nessessary Files NetworkParser
	exclude('de/uniks/networkparser/bytes/**')
	exclude('de/uniks/networkparser/date/**')
	classifier = 'pm'
}

task pmJarVersion(type: Jar) {
	appendix = gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision
	classifier = "pm."+gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision
}

pmJarVersion.dependsOn pmJar

task pomFile(type: Jar) {
	def sw = new StringWriter();
	def crlf="\r\n";
	//def version=gitVersion.major+"."+gitVersion.minor+"."+gitVersion.revision;
	def version="SNAPSHOT";
	def time= gitVersion.mavenTime
	
	sw.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+crlf);
	sw.append("<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+crlf);
	sw.append("\t<modelVersion>4.0.0</modelVersion>"+crlf);
	sw.append("\t<groupId>org.sdmlib</groupId>"+crlf);
	sw.append("\t<artifactId>SDMLib</artifactId>"+crlf);
	sw.append("\t<version>"+version+"</version>"+crlf);
	sw.append("</project>"+crlf);

	def file = new File("build")
        file.mkdirs()
	file = new File("build/SDMLib-SNAPSHOT-pm.xml")
	println file.getAbsolutePath()
	def stringsFile = new FileWriter(file, false)
	stringsFile.write(sw.toString())
	stringsFile.close()

	sw = new StringWriter();
	sw.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+crlf);
	sw.append("<metadata>"+crlf);
	sw.append("\t<groupId>org.sdmlib</groupId>"+crlf);
	sw.append("\t<artifactId>SDMLib</artifactId>"+crlf);
	sw.append("\t<version>"+version+"</version>"+crlf);
	sw.append("\t<versioning>"+crlf);
	sw.append("\t\t<snapshot><timestamp>"+time+"</timestamp><buildNumber>1</buildNumber></snapshot>"+crlf);
	sw.append("\t\t<lastUpdated>"+time+"</lastUpdated>"+crlf);
	sw.append("\t\t<snapshotVersions>"+crlf);
	sw.append("\t\t\t<snapshotVersion>"+crlf);
	sw.append("\t\t\t\t<extension>pom</extension>"+crlf);
	sw.append("\t\t\t\t<value>"+version+"</value>"+crlf);
	sw.append("\t\t\t\t<updated>"+time+"</updated>"+crlf);
	sw.append("\t\t\t</snapshotVersion>"+crlf);
	sw.append("\t\t\t<snapshotVersion>"+crlf);
	sw.append("\t\t\t\t<classifier>pm</classifier>"+crlf);
	sw.append("\t\t\t\t<extension>jar</extension>"+crlf);
	sw.append("\t\t\t\t<value>"+version+"</value>"+crlf);
	sw.append("\t\t\t\t<updated>"+time+"</updated>"+crlf);
	sw.append("\t\t\t</snapshotVersion>"+crlf);
	sw.append("\t\t</snapshotVersions>"+crlf);
	sw.append("\t</versioning>"+crlf);
	sw.append("</metadata>"+crlf);

	stringsFile = new FileWriter("build/maven-metadata.xml")
	stringsFile.write(sw.toString())
	stringsFile.close()
}